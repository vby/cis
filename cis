#!/usr/bin/env python

import sys
import os
import subprocess
import argparse
import shutil
import re
import types
import traceback

# Configs
CISCONFIG_FILE = os.path.expanduser('~/.cisconfig')
if os.path.exists(CISCONFIG_FILE):
	with open(CISCONFIG_FILE, 'rb') as f:
		exec(compile(f.read(), CISCONFIG_FILE, 'exec')) 
def CISLoadConfig(name, default_value):
	if globals().get(name) == None:
		globals()[name] = os.environ.get(name) or default_value 

CISLoadConfig('CIS_CMAKE_COMMAND', 'cmake')
CISLoadConfig('CIS_CTEST_COMMAND', 'ctest')
CISLoadConfig('CIS_BINARY_DIR', 'build')
CISLoadConfig('CIS_FIND_SOURCE_DIRECTORY', True)

# Constants
CMAKELISTS = 'CMakeLists.txt'
CMAKECACHE = 'CMakeCache.txt'
CIS_NAME = 'cis'
CIS_VERSION='1.3.0'
CIS_PROG = os.path.basename(sys.argv[0])
CIS_COMMAND = os.path.abspath(sys.argv[0])
CIS_DESCRIPTION = '%s - high-level interface to the CMake command-line tools.'%(CIS_NAME)
CIS_CWD_ORIGIN = os.getcwd()

CIS_INIT_CMAKELISTS = '''# Generated by cis.
cmake_minimum_required(VERSION %(cmake_version)s)\n
project(%(proj)s CXX)\n
file(GLOB_RECURSE sources "src/*.cpp")
add_executable(%(proj)s ${sources})
#add_library(%(proj)s STATIC ${sources})
#add_library(%(proj)s SHARED ${sources})
target_include_directories(%(proj)s PUBLIC ${include_dirs})
target_link_libraries(%(proj)s ${libs})\n
#install(TARGETS %(proj)s DESTINATION bin)
#install(TARGETS %(proj)s DESTINATION lib)
#install(DIRECTORY src/ DESTINATION include FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h")\n
'''

# Exceptions
class CISError(Exception):
	pass

class Utils:
	@staticmethod
	def print_subprocess_arguments(args):
		def simple_escape(arg):
			if not arg or ' ' in arg:
				return '"%s"'%(arg)
			return arg
		Utils.printc(' '.join((simple_escape(arg) for arg in args)), attrs='green,bold')
	
	@staticmethod
	def call_subprocess(args, output=False, echo=True, **kw):
		if echo:
			Utils.print_subprocess_arguments(args)
		out = kw.get('stdout') or sys.stdout
		err = kw.get('stderr')
		out.flush()
		if err:
			err.flush()
		else:
			kw['stderr'] = subprocess.STDOUT
		try:
			if output:
				return subprocess.check_output(args, **kw)
			else:
				subprocess.check_call(args, **kw)
		except OSError as e:
			raise CISError('Subprocess "%s" %s'%(args[0], str(e)))
		
	@staticmethod
	def printc(text, end='\n', file=sys.stdout, flush=False, attrs=None):
		if attrs:
			args = ['-E', 'cmake_echo_color', '--no-newline']
			args += ('--%s'%(attr.strip()) for attr in attrs.split(','))
			args.append(text)
			CIS.call_cmake(args, echo=False, stdout=file)
		else:
			file.write(text)
		if end:
			file.write(end)
		if flush:
			file.flush()

	@staticmethod
	def fuzzy_complete(words, word):
		if not word:
			return None
		if word in words:
			return word
		word_l = word.lower()
		for w in words:
			if w.lower().startswith(word_l):
				return w
		def find_chars(s, chars):
			poss = []
			pos = 0
			for c in chars:
				pos = s.find(c, pos)
				if pos < 0:
					break
				poss.append(pos)
				pos += 1
			if pos <= 0:
				return None 
			return poss 
		word_u = word.upper()
		candidates = []
		for w in words:
			poss = find_chars(w, word_u)
			if poss:
				candidates.append((w, poss))
		if not candidates:
			for w in words:
				poss = find_chars(w.lower(), word_l)
				if poss:
					candidates.append((w, poss))
		if candidates:
			if len(candidates) == 1:
				return candidates[0][0]
			c = min(candidates, key=lambda x: x[1])[0]
			m = re.match(r'^(\D+)\d+ ', c)
			if m:
				re_candidates = []
				c_s = m.group(1)
				for w, _ in candidates:
					if w.startswith(c_s):
						return w
			return c
		return None

######## ArgumentParser ########

class ArgumentError(Exception):
	def __init__(self, message, argparser):
		Exception.__init__(self, message)
		self.argparser = argparser

class ArgumentSubparsers:
	def __init__(self, argsubparsers):
		self._argsubparsers = argsubparsers
		self._subparsers = {}
	
	def add_parser(self, name, *args, **kw):
		parser = self._argsubparsers.add_parser(name, *args, **kw)
		#parser.set_defaults(argparser=parser)
		self._subparsers[name] = parser
		return parser

	def get_parser(self, name):
		return self._subparsers.get(name)

class ArgumentParser(argparse.ArgumentParser):
	def __init__(self, *args, **kw):
		argparse.ArgumentParser.__init__(self, *args, **kw)
		self.name = args[0] if args else kw.get('name')
		self._all_subparsers = []
		self._all_subargs = {}

	#def __getattr__(self, name):
	#	return getattr(self._argparser, name)

	def __repr__(self):
		return 'ArgumentParser(name=%s, prog=%s)'%(self.name, self.prog)

	def add_subargument(self, *args, **kw):
		dest = kw.get('dest')
		if dest == None:
			dest = args[0].lstrip('-').replace('-', '_')
		for arg in args:
			self._all_subargs[arg] = dest

	def add_subparsers(self, *args, **kw):
		kw['parser_class'] = ArgumentParser
		subparsers = ArgumentSubparsers(argparse.ArgumentParser.add_subparsers(self, *args, **kw))
		self._all_subparsers.append(subparsers)
		return subparsers

	def get_subparsers(self, idx=0):
		return self._all_subparsers[idx] if idx >= 0 and idx < len(self._all_subparsers) else None

	def parse_known_args(self, args=None, namespace=None):
		if not self._all_subargs:
			return argparse.ArgumentParser.parse_known_args(self, args, namespace) 
		if args == None:
			args = sys.argv
		subargs = {}
		if self._all_subargs:
			xargs = []
			sep = None
			for arg in args:
				if arg in self._all_subargs:
					sep = arg
					if sep not in subargs:
						subargs[sep] = []
					continue
				if sep:
					subargs[sep].append(arg)
				else:
					xargs.append(arg)
			args = xargs
		options, args = argparse.ArgumentParser.parse_known_args(self, args, namespace)
		for arg in subargs:
			dest = self._all_subargs[arg]
			sargs = getattr(options, dest, None)
			if not sargs:
				setattr(options, dest, subargs[arg])
			else:
				sargs.extend(subargs[arg])
		return options, args

	def error(self, message):
		raise ArgumentError(message, self)

class PathAction(argparse.Action):
	def __call__(self, parser, namespace, values, option_string=None):
		setattr(namespace, self.dest, os.path.abspath(os.path.expanduser(values)))

class PathOrNameAction(argparse.Action):
	def __call__(self, parser, namespace, values, option_string=None):
		if not os.path.dirname(values):
			setattr(namespace, self.dest, values)
		else:
			setattr(namespace, self.dest, os.path.abspath(os.path.expanduser(values)))

class CMakeCache:
	def __init__(self, cmakecache=None):
		#if not os.path.exists(cmakecache):
			#raise CISError('The build directory "%s" does not appear to contain %s.'%(CIS.get_binary_directory(), CMAKECACHE))
		entries = {}
		if cmakecache:
			with open(cmakecache) as f:
				for line in f:
					line = line.strip()
					if not line or line.startswith('#') or line.startswith('//'):
						continue
					ename, vtype, value = self.split_entry(line)
					entries[ename] = (value, vtype)
		self._entries = entries

	@classmethod
	def split_entry(cls, entry):
		nametype, value = entry.split('=')
		name_type = nametype.split(':')
		vtype = name_type[1].strip() if len(name_type) > 1 else None
		return (name_type[0].strip(), vtype, value.strip())

	def get_entries(self):
		return self._entries 

	def get_entry(self, name, with_type=False):
		entry = self._entries.get(name)
		if not with_type:
			return entry[0] if entry else ''
		return entry

class MakeArgs:
	Property = 0
	Jobs = 1
	Trace = 2
	Debug = 3
	Silent = 4
	Help = 5
	Version = 6

class Builder:
	MULTI_CONFIG = False

	@classmethod
	def translate_make_arg(cls, make_arg, value=None):
		fv = cls.make_args.get(make_arg)
		if fv == None:
			return ()
		if isinstance(fv, types.FunctionType):
			fv = fv(value)
		if isinstance(fv, tuple) or isinstance(fv, list):
			return fv
		return (fv,)

	@classmethod
	def final_translate_make_args(cls, args):
		pass

class Make(Builder):
	make_args = {
		MakeArgs.Property: lambda value: value, 
		MakeArgs.Jobs: lambda value: '--jobs' if value == None else '--jobs=%s'%(str(value)),
		MakeArgs.Trace: '--trace', 
		MakeArgs.Debug: lambda value: '--debug' if not value else '--debug=%s'%(str(value)), 
		MakeArgs.Silent: '--silent',
		MakeArgs.Help: '--help',
		MakeArgs.Version: '--version',
	}

class MSBuild(Builder):
	MULTI_CONFIG = True

	make_args = {
		MakeArgs.Property: lambda x: '/property:%s'%(x),
		MakeArgs.Jobs: lambda x: '/maxcpucount' if x == None else '/maxcpucount:%d'%(x),
		MakeArgs.Trace: ('/nologo', '/verbosity:normal'),
		MakeArgs.Debug: lambda x: ('/verbosity:diagnostic', '/detailedsummary') if not x or x == 'a' else '/verbosity:detailed',
		MakeArgs.Silent: ('/nologo', '/verbosity:quiet'),
		MakeArgs.Help: '/help',
		MakeArgs.Version: '/version',
	}

	@classmethod
	def final_translate_make_args(cls, args):
		uset = set()
		args.insert(0, '/nologo')
		for arg in args:
			if arg and arg[0] == '/':
				uset.add(arg.partition(':')[0])
		if '/verbosity' not in uset:
			args.insert(0, '/verbosity:minimal')
			args.insert(0, '/nologo')

class Xcode(Builder):
	MULTI_CONFIG = True

	make_args = {
		MakeArgs.Jobs: lambda value: '-parallelizeTargets' if not value else ('-jobs', str(value)),
		MakeArgs.Debug: '-verbose',
		MakeArgs.Silent: '-quiet',
		MakeArgs.Help: '-help',
		MakeArgs.Version: '-version',
	}

class Command:
	ALLOW_UNKNOWN_ARGS = False

	def __init__(self, options, unknown_args=()):
		self.argparser = CIS.get_argparser().get_subparsers().get_parser(options.command)
		if not self.ALLOW_UNKNOWN_ARGS and unknown_args:	
			raise ArgumentError('unrecognized arguments: %s'%(' '.join(unknown_args)), self.argparser)
		self.options = options
		self.unknown_args = unknown_args

class InitCommand(Command):
	def run(self):
		cwd = os.getcwd()
		cmakelists = os.path.join(cwd, CMAKELISTS)
		if os.path.exists(cmakelists):
			raise CISError('"%s" exists.'%(cmakelists))
		try:
			self.gen_cmakelists(cmakelists)
		except:
			if os.path.exists(cmakelists):
				os.remove(cmakelists)
			raise

	@classmethod
	def gen_cmakelists(cls, cmakelists):
		project_name = os.path.basename(os.getcwd())
		with open(cmakelists, 'w') as f:
			f.write(CIS_INIT_CMAKELISTS % { 'cmake_version': CIS.get_cmake_version().rpartition('.')[0], 'proj': project_name })
	
class CmakeCommand(Command):
	ALLOW_UNKNOWN_ARGS = True

	def run(self):
		if self.options.help:
			CIS.call_cmake(('--help',), echo=False)
			return

		cmake_args = ['-H' + CIS.get_source_directory(), '-B' + CIS.get_binary_directory()]
		if self.options.G != None:
			g = CIS.complete_generator(self.options.G)
			if self.options.force:
				CIS.remove_cmakecache()
			cmake_args.extend(('-G', g))
		CIS.call_cmake(cmake_args, self.unknown_args)

class BuildCommand(Command):
	ALLOW_UNKNOWN_ARGS = True

	def __init__(self, options, unknown_args):
		Command.__init__(self, options, unknown_args)
		if options.config:
			self.config = options.config
		else:
			self.config = CIS.get_build_type()

	def run(self):
		self.check_cmake()
		self.build(self.options, self.unknown_args)

	def check_cmake(self):
		if self.config:
			args = ('-DCMAKE_BUILD_TYPE=%s'%(self.config),)
		else:
			args = ()
		if not CIS.call_command('cmake', unknown_args=args) and not CIS.is_cmakecache_exists():
			CIS.call_command('cmake', args)

	def build(self, options, unknown_args, targets=None):
		if not targets:
			targets = []
		if options.target:
			targets.append(options.target)

		cmake_args = ['--build', CIS.get_binary_directory()]
		if self.config:
			cmake_args.extend(('--config', self.config)) 
		if options.clean_first:
			cmake_args.append('--clean-first')
	
		if unknown_args:
			unknown_args = ['--']  + unknown_args

		if not targets:
			CIS.call_cmake(cmake_args, unknown_args)
		else:
			for target in targets:
				CIS.call_cmake(cmake_args + ['--target', target], unknown_args)

class MakeCommand(BuildCommand):
	ALLOW_UNKNOWN_ARGS = True

	def run(self):
		if self.options.make_directory:
			os.chdir(self.options.make_directory)

		self.check_cmake()

		builder = CIS.get_builder()

		targets, args = self.translate_make_args(builder)
		if self.options.target:
			targets.insert(0, self.options.target)
		if self.unknown_args:
			args.extend(self.unknown_args)
		builder.final_translate_make_args(args)

		self.build(self.options, args, targets)

	def translate_make_args(self, builder):
		options = self.options
		args = []
		# properties in targets
		targets = []
		if options.targets:
			target_set = set()
			for target in options.targets:
				if '=' in target:
					args += builder.translate_make_arg(MakeArgs.Property, target)
				else:
					if target in target_set:
						continue
					target_set.add(target)
					targets.append(target)
		# -j --jobs
		if options.jobs == None: 
			args += builder.translate_make_arg(MakeArgs.Jobs)
		elif options.jobs >= 0:
			args += builder.translate_make_arg(MakeArgs.Jobs, options.jobs)
		# --trace
		if options.trace:
			args += builder.translate_make_arg(MakeArgs.Trace)
		# -d --deubg
		if options.d or options.debug != False:
			if options.d or not options.debug:
				args += builder.translate_make_arg(MakeArgs.Debug)
			else:
				args += builder.translate_make_arg(MakeArgs.Debug, options.debug)
		# -s --silent
		if options.silent:
			args += builder.translate_make_arg(MakeArgs.Silent)
		# -h --help
		if options.help:
			args += builder.translate_make_arg(MakeArgs.Help)
		# -v --version
		if options.version:
			args += builder.translate_make_arg(MakeArgs.Version)
		return targets, args

class TestCommand(Command):
	ALLOW_UNKNOWN_ARGS = True

	def run(self):
		if self.options.help:
			CIS.call_ctest(('--help',), echo=False)
			return

		if self.options.build_config:
			config = self.options.build_config
		else:
			config = CIS.get_config()
		if config:
			args = ('--config', config)
		else:
			args = ()
		if not CIS.call_command('make', unknown_args=args) and not CIS.call_command('build', unknown_args=args) and not CIS.is_cmakecache_exists():
			CIS.call_command('build', args)

		cmake_args = ['-E', 'chdir', CIS.get_binary_directory(), CIS.options.ctest_command]
		if config:
			cmake_args.extend(('-C', config)) 
		CIS.call_cmake(cmake_args, self.unknown_args)

class CleanCommand(Command):
	def run(self):
		source_dir = CIS.get_source_directory()
		binary_dir = CIS.get_binary_directory()
		if not os.path.exists(binary_dir):
			return
		if self.options.all:
			if source_dir == binary_dir:
				raise CISError('The build directory "%s" contains %s.'%(binary_dir, CMAKELISTS))
			CIS.call_cmake(('-E', 'remove_directory', binary_dir))
		elif self.options.target:
			CIS.call_command('build', ['--target', 'clean'] + unknown_args)
		else:
			CIS.remove_cmakecache()
	
class StatusCommand(Command):
	def run(self):
		source_dir = CIS.get_source_directory()
		binary_dir = CIS.get_binary_directory()
		Utils.printc('CMAKE_SOURCE_DIR = %s'%(source_dir))
		Utils.printc('CMAKE_BINARY_DIR = ', end=None)
		has_cmakecache = False
		if not os.path.exists(binary_dir):
			Utils.printc('%s (Not exists)'%(binary_dir), attrs='red')
		else:
			if not CIS.is_cmakecache_exists():
				Utils.printc(binary_dir, end=None)
				Utils.printc(' (No %s)'%(CMAKECACHE), attrs='red')
			else:
				has_cmakecache = True
				Utils.printc(binary_dir)
		if not has_cmakecache:
			return
		names = ('CMAKE_PROJECT_NAME', 'CMAKE_GENERATOR', 'CMAKE_CONFIGURATION_TYPES', 'CMAKE_BUILD_TYPE', 'CMAKE_INSTALL_PREFIX')
		for name in names:
			value = CIS.get_cmakecache_entry(name)
			if name == 'CMAKE_GENERATOR':
				platform = CIS.get_cmakecache_entry(name + '_PLATFORM')
				toolset = CIS.get_cmakecache_entry(name + '_TOOLSET')
				Utils.printc('%s = %s (PLATFORM=%s, TOOLSET=%s)'%(name, value or '', platform or '', toolset or '')) 
			else:
				Utils.printc('%s = %s'%(name, value or '')) 
		# Show compilers
		for name, (value, vtype) in CIS.get_cmakecache().get_entries().items():
			if name.startswith('CMAKE_') and name.endswith('_COMPILER'):
				Utils.printc('%s = %s'%(name, value or '')) 
	
class ShowCommand(Command):
	def run(self):
		options = self.options
		if options.name:
			name = options.name
			entry = CIS.get_cmakecache_entry(name, with_type=True)
			if not entry:
				raise CISError('No cache entry \'%s\''%(name))
			Utils.printc('%s:%s = %s'%(name, entry[1], entry[0]))
			return
		internal_entries = []
		entries = []
		for name, (value, vtype) in CIS.get_cmakecache().get_entries().items(): #items() for compatible to python3
			if options.internal:
				if vtype == 'INTERNAL':
					internal_entries.append((name, value))
				continue
			if options.external:
				if vtype != 'INTERNAL':
					entries.append((name, vtype, value))
				continue
			if options.cmake:
				if name.startswith('CMAKE_'):
					entries.append((name, vtype, value))
				continue
			if options.non_cmake:
				if not name.startswith('CMAKE_'):
					entries.append((name, vtype, value))
				continue
			if vtype == 'INTERNAL':
				internal_entries.append((name, value))
			else:
				entries.append((name, vtype, value))
		if internal_entries:
			if not options.internal:
				Utils.printc('INTERNAL:', attrs='cyan')
			for name, value in sorted(internal_entries):
				Utils.printc('%s = %s'%(name, value))
		if entries:
			if not options.external and not options.cmake and not options.non_cmake:
				Utils.printc('EXTERNAL:', attrs='cyan')
			for name, vtype, value in sorted(entries):
				Utils.printc('%s:%s = %s'%(name, vtype, value))
	
class HelpCommand(Command):
	def run(self):
		if self.options.subcommand:
			parser = CIS.get_argparser().get_subparsers().get_parser(self.options.subcommand)
			if not parser:
				raise CISError('No command \'%s\''%(self.options.subcommand))
			parser.print_help()
		elif self.options.generators:
			gens = CIS.get_generators()
			idx = 0
			for gen, choices, gen_help in gens:
				idx += 1
				Utils.printc('%02d. %s%s'%(idx, gen, ' [%s]'%('|'.join(choices)) if choices else ''))
		elif self.options.msbuild:
			Utils.printc('https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference')
			Utils.printc('Properties: https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties')
		else:
			CIS.get_argparser().print_help()

class CIS:
	@classmethod
	def add_init_parser(cls, subparsers):
		parser = subparsers.add_parser('init', help='Init a %s template'%(CMAKELISTS))
	
	@classmethod
	def add_cmake_parser(cls, subparsers):
		parser = subparsers.add_parser('cmake', conflict_handler='resolve', help='Run cmake')
		parser.add_argument('-G', metavar='<generator>', help='Specify a build system generator, can be the number of %s help -G'%(CIS_PROG))
		parser.add_argument('-f', '--force', action='store_true', help='Clean cmake cache first, then regenerate')
		parser.add_argument('--help', action='store_true', help='Print the help message of cmake and exit')
	
	@classmethod
	def add_build_parser(cls, subparsers, parser=None):
		if not parser:
			parser = subparsers.add_parser('build', help='Run cmake --build')
		parser.add_argument('--target', metavar='<target>', help='Build <target> instead of default targets')
		parser.add_argument('--config', metavar='<config>', help='For multi-configuration tools, choose <config>')
		parser.add_argument('--clean-first', action='store_true', help='Build target \'clean\' first, then build')
	
	@classmethod
	def add_make_parser(cls, subparsers):
		parser = subparsers.add_parser('make', conflict_handler='resolve', help='Run cmake --build with make interface')
		parser.add_argument('targets', nargs='*', help='Targets to make')
		parser.add_argument('-C', '--directory', metavar='<directory>', action=PathAction, dest='make_directory', help='Change to <directory> before doing anything')
		parser.add_argument('-j', '--jobs', metavar='<n>', type=int, nargs='?', default=-1, help='Allow <n> jobs at once; infinite jobs with no arg')
		parser.add_argument('-d', action='store_true', help='Print lots of debugging information')
		parser.add_argument('--debug', metavar='<flags>', nargs='?', default=False, help='Print various types of debugging information')
		parser.add_argument('--trace', action='store_true', help='Print tracing information')
		parser.add_argument('-s', '--silent', '--quiet', action='store_true', help='Don\'t echo recipes')
		parser.add_argument('-v', '--version', action='store_true', help='Print the version number of native builder and exit')
		parser.add_argument('--help', action='store_true', help='Print the help message of native builder and exit')
		group = parser.add_argument_group(title='build arguments')
		cls.add_build_parser(subparsers, group)
		
	@classmethod
	def add_test_parser(cls, subparsers):
		parser = subparsers.add_parser('test', conflict_handler='resolve', help='Run ctest')
		parser.add_argument('-C', '--build-config', metavar='<config>', help='Choose configuration to ctest')
		parser.add_argument('--help', action='store_true', help='Print the help message of ctest and exit')
	
	@classmethod
	def add_clean_parser(cls, subparsers):
		parser = subparsers.add_parser('clean', help='Clean cmake cache files')
		parser.add_argument('-a', '--all', action='store_true', help='Remove the <binary-dir>')
		parser.add_argument('-t', '--target', action='store_true', help='Same as \'%s build --target clean\''%(CIS_PROG))
	
	@classmethod
	def add_status_parser(cls, subparsers):
		parser = subparsers.add_parser('status', help='Show the working tree status')
	
	@classmethod
	def add_show_parser(cls, subparsers):
		parser = subparsers.add_parser('show', help='Show cmake cache entries')
		parser.add_argument('-N', '--name', metavar='<name>', help='Show cache entry named <name>')
		parser.add_argument('--internal', action='store_true', help='Only show cache entries with type INTERNAL')
		parser.add_argument('--external', action='store_true', help='Only show cache entries with non INTERNAL type')
		parser.add_argument('--cmake', action='store_true', help='Only show cache entries with "CMAKE_" prefix')
		parser.add_argument('--non-cmake', action='store_true', help='Only show cache entries with non "CMAKE_" prefix')
	
	@classmethod
	def add_help_parser(cls, subparsers):
		parser = subparsers.add_parser('help', help='Show help information')
		parser.add_argument('subcommand', metavar='<command>', nargs='?', help='Same as \'%s <command> -h\''%(CIS_PROG))
		parser.add_argument('-G', '--generators', action='store_true', help='Show available cmake generators')
		parser.add_argument('-M', '--msbuild', action='store_true', help='Show make properties')

	_argparser = None
	
	@classmethod
	def get_argparser(cls):
		if cls._argparser:
			return cls._argparser

		parser = ArgumentParser(prog=CIS_PROG, 
			description=CIS_DESCRIPTION,
			epilog='See \'%s help <command>\' to read about a specific subcommand.'%(CIS_PROG),
			formatter_class=argparse.RawTextHelpFormatter,
			add_help=True)
	
		parser.add_argument('-C', '--directory', metavar='<directory>', action=PathAction, help='Change to <directory> before doing anything')
		parser.add_argument('-B', '--binary-dir', metavar='<binary-dir>', default=CIS_BINARY_DIR, help='Default \'%s\', relative to the source directory'%(CIS_BINARY_DIR))
		parser.add_argument('--cmake-command', metavar='<cmake-command>', action=PathOrNameAction, default=CIS_CMAKE_COMMAND, help='Default \'%s\''%(CIS_CMAKE_COMMAND))
		parser.add_argument('--ctest-command', metavar='<ctest-command>', action=PathOrNameAction, default=CIS_CTEST_COMMAND, help='Default \'%s\''%(CIS_CTEST_COMMAND))
		parser.add_argument('-v', '--version', action='version',
				version='%%(prog)s version %s\n\n%s maintained and supported by vby(Github.com/vby).\n'%(CIS_VERSION, CIS_NAME),
				help='Print the version number of %s and exit'%(CIS_PROG))
	
		subparsers = parser.add_subparsers(title='Commands', metavar='<command>', dest='command')
	
		cls.add_init_parser(subparsers)
		cls.add_cmake_parser(subparsers)
		cls.add_build_parser(subparsers)
		cls.add_make_parser(subparsers)
		cls.add_test_parser(subparsers)
		cls.add_clean_parser(subparsers)
		cls.add_status_parser(subparsers)
		cls.add_show_parser(subparsers)
		cls.add_help_parser(subparsers)

		parser.add_subargument('--')
		parser.add_subargument('--cmake')
		parser.add_subargument('--build')
		parser.add_subargument('--make')
	
		cls._argparser = parser
		return parser

	@classmethod
	def call_cmake(cls, args=(), unknown_args=None, **kw):
		argv = [cls.options.cmake_command]
		argv.extend(args)
		if unknown_args:
			argv.extend(unknown_args)
		return Utils.call_subprocess(argv, **kw)

	@classmethod
	def call_ctest(cls, args=(), unknown_args=None, **kw):
		argv = [cls.options.ctest_command]
		argv.extend(args)
		if unknown_args:
			argv.extend(unknown_args)
		return Utils.call_subprocess(argv, **kw)

	@classmethod
	def get_command_type(cls, name):
		return globals()[name.capitalize() + 'Command']

	@classmethod
	def call_command(cls, name, args=None, options=None, unknown_args=[]):
		if not options:
			if args == None:
				args = getattr(cls.options, name, None)
				if args == None:
					return False
				args.extend(unknown_args)
			options, unknown_args = cls.get_argparser().get_subparsers().get_parser(name).parse_known_args(args)
		CommandType = cls.get_command_type(name)
		command = CommandType(options, unknown_args)
		#print 'Run %s: '%(name), cls.options, ' unknown_args: ', unknown_args
		command.run()
		return True

	####### CMake ######

	_source_dir = None
	_binary_dir = None
	_generators = None
	_cmakecache = None
	_cmake_version = None
	_builder = None

	@classmethod
	def get_cmake_version(cls):
		if cls._cmake_version:
			return cls._cmake_version
		version_text = cls.call_cmake(('--version',), output=True, echo=False).decode()
		m = re.search(r'version ([0-9.]+)', version_text)
		cls._cmake_version = m.group(1) 
		return cls._cmake_version
	
	@classmethod
	def find_source_directory(cls, from_dir=None):
		if not from_dir:
			from_dir = os.getcwd()
		while not os.path.exists(os.path.join(from_dir, CMAKELISTS)):
			from_dir, f = os.path.split(from_dir)
			if not f:
				return None
		return os.path.normpath(from_dir)

	@classmethod
	def get_source_directory(cls):
		if cls._source_dir:
			return cls._source_dir
		cwd = os.getcwd()
		if CIS_FIND_SOURCE_DIRECTORY:
			source_dir = cls.find_source_directory(cwd)
		else:
			source_dir = None
			if os.path.exists(os.path.join(cwd, CMAKELISTS)):
				source_dir = cwd
		if not source_dir:
			raise CISError('Not a cmake project (or any of the parent directories): \'%s\''%(cwd))
		cls._source_dir = source_dir
		return source_dir
	
	@classmethod
	def get_binary_directory(cls):
		if cls._binary_dir:
			return cls._binary_dir
		source_dir = cls.get_source_directory()
		binary_dir = os.path.normpath(os.path.join(source_dir, CIS.options.binary_dir))
		cls._binary_dir = binary_dir
		return binary_dir

	@classmethod
	def get_cmakelists_file(cls):
		return os.path.join(cls.get_source_directory(), CMAKELISTS)
	
	@classmethod
	def get_cmakecache_file(cls):
		return os.path.join(cls.get_binary_directory(), CMAKECACHE)
	
	@classmethod
	def is_cmakecache_exists(cls):
		return os.path.exists(cls.get_cmakecache_file())
	
	@classmethod
	def remove_cmakecache(cls):
		cmakecache = cls.get_cmakecache_file() 
		if os.path.exists(cmakecache):
			Utils.printc('Remove %s'%(cmakecache), attrs='green,bold')
			os.remove(cmakecache)

	@classmethod
	def get_generators(cls):
		if cls._generators:
			return cls._generators
		gen_lines = []
		cmake_help_text = cls.call_cmake(('-h',), output=True, echo=False).decode()
		g = False 
		for line in cmake_help_text.splitlines():
			line_s = line.strip()
			if not line_s:
				continue
			if g:
				if line.endswith(':'):
					continue
				if line.startswith('    ') and gen_lines:
					gen_lines[-1] = gen_lines[-1] + ' ' + line_s
					continue
				gen_lines.append(line_s)
			elif line_s.startswith('Generators'):
				g = True
		generators = []
		for line in gen_lines:
			lines = line.split('=')
			if len(lines) == 1:
			  continue
			gen = lines[0].strip()
			if not gen:
				continue
			gen_help = lines[1].strip()
			m = re.match(r'^(.+)\[\w+\]$', gen) 
			if m:
				gen = m.group(1).strip()
				choices = re.findall(r'"(\w+)"', gen_help)
			else:
				choices = None
			generators.append((gen, choices, gen_help))
		cls._generators = generators
		return generators

	@classmethod
	def complete_generator(cls, gen):
		gen = gen.strip()
		if not gen:
			return ''
		gens = cls.get_generators()
		expand_gens = []
		for g, choices, _ in gens:
			expand_gens.append(g)
			if choices:
				for choice in choices:
					expand_gens.append('%s %s'%(g, choice))
		if gen in expand_gens:
			return gen
		m = re.match(r'^\s*(\d+)\s*(\w*)$', gen)
		if m:
			idx = int(m.group(1))
			opt = m.group(2) 
			if idx > 0 and idx < len(gens):
				g, choices, _ = gens[idx-1]
				if opt:
					if choices:
						return '%s %s'%(g, Utils.fuzzy_complete(choices, opt) or opt)
				else:
					return g
		return Utils.fuzzy_complete(expand_gens, gen) or gen

	@classmethod
	def get_cmakecache(cls):
		if cls._cmakecache:
			return cls._cmakecache
		cmakecache = cls.get_cmakecache_file()
		if os.path.exists(cmakecache):
			cls._cmakecache = CMakeCache(cmakecache)
		else:
			return CMakeCache()
		return cls._cmakecache

	@classmethod
	def get_cmakecache_entry(cls, *arg, **kw):
		return cls.get_cmakecache().get_entry(*arg, **kw)

	@classmethod
	def get_generator(cls):
		return cls.get_cmakecache_entry('CMAKE_GENERATOR')

	@classmethod
	def get_build_type(cls):
		return cls.get_cmakecache_entry('CMAKE_BUILD_TYPE')

	@classmethod
	def get_builder(cls):
		if cls._builder:
			return cls._builder
		gen = cls.get_generator()
		if gen.find('Makefile') >= 0:
			cls._builder = Make
		elif gen.find('Ninja') >= 0:
			cls._builder = Ninja
		elif gen.find('Visual Studio') >= 0:
			cls._builder = MSBuild
		elif gen.find('Xcode') >= 0:
			cls._builder = Xcode
		return cls._builder

	@classmethod
	def get_config(cls):
		build_type = cls.get_build_type()
		if build_type:
			return build_type
		cfg_types = cls.get_cmakecache_entry('CMAKE_CONFIGURATION_TYPES')
		if cfg_types:
			return cfg_types.partition(';')[0]
		return None
	
	@classmethod
	def run(cls, argv = sys.argv[1:]):
		argparser = cls.get_argparser()

		if not argv:
			argparser.print_help()
			sys.exit(1)

		cls.options, unknown_args = argparser.parse_known_args(argv)

		if cls.options.directory:
			os.chdir(cls.options.directory)

		args = getattr(cls.options, cls.options.command, None)
		if args:
			unknown_args.extend(args)
		args = getattr(cls.options, '', None)
		if args:
			unknown_args.extend(args)

		cls.call_command(cls.options.command, options=cls.options, unknown_args=unknown_args)

if __name__ == '__main__':
	try:
		CIS.run()
	except KeyboardInterrupt:
		sys.exit(2)
	except ArgumentError as e:
		Utils.printc('%s'%(e.message), file=sys.stderr)
		e.argparser.print_usage(file=sys.stderr)
		sys.exit(3)
	except CISError as e:
		Utils.printc("CISError: %s"%(str(e)), file=sys.stderr)
		sys.exit(4)
	except subprocess.CalledProcessError as e:
		sys.exit(e.returncode)
	except Exception as e:
		traceback.print_exc(file=sys.stderr)
		sys.exit(5)

