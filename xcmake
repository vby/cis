#!/usr/bin/env python

import sys
import os
import subprocess
import argparse
import shutil

CMAKELISTS = 'CMakeLists.txt'
CMAKECACHE = 'CMakeCache.txt'
CMAKE_MIN_VERSION = '2.6'
WORK_DIR = os.getcwd()

XCMAKE_BUILD_DIR = os.environ.get('XCMAKE_BUILD_DIR') or 'build_xcmake'
XCMAKE_ABS_BUILD_DIR = os.path.abspath(XCMAKE_BUILD_DIR)
XCMAKE_INSTALL_DIR = 'out'
XCMAKE_PROG = 'xcmake'
XCMAKE_DESCRIPTION = 'XCMake - CMake Make Interface'

XCMAKE_ARGS = None

class XCMakeError(Exception):
	pass

def sh_escape(arg):
	if not arg or arg.find(' ') >= 0:
		return '"%s"'%(arg)
	return arg

def sh_check_call(args):
	subprocess.call(['cmake', '-E', 'cmake_echo_color', '--green', '--bold', ' '.join((sh_escape(arg) for arg in args))])
	subprocess.check_call(args)

def do_cmake(args=None, with_argv=True, ddash_args=None):
	cmake_argv = ['cmake']
	if args:
		cmake_argv += args
	if with_argv and XCMAKE_ARGS.cmake_argv:
		cmake_argv += XCMAKE_ARGS.cmake_argv
	if ddash_args:
		if '--' not in XCMAKE_ARGS.cmake_argv:
			cmake_argv.append('--')
		cmake_argv += ddash_args
	sh_check_call(cmake_argv)

def find_cache_entry(name):
	try:
		return find_cache_entry.entries.get(name)
	except:
		find_cache_entry.entries = {}
	entries = find_cache_entry.entries
	with open(os.path.join(XCMAKE_ARGS.build_dir, CMAKECACHE)) as f:
		for line in f:
			line = line.strip()
			if not line or line.startswith('#') or line.startswith('//'):
				continue
			entry, value = line.split('=')
			ename, vtype = entry.split(':')
			entries[ename] = (value, vtype)
	return entries.get(name)

def command_version():
	sys.stdout.write('%s\n\n'%(XCMAKE_DESCRIPTION))
	cmake_argv = ['cmake', '--version']
	subprocess.check_call(cmake_argv)

def do_command_scratch(cmakelists):
	project_name = os.path.basename(WORK_DIR)
	with open(cmakelists, 'w') as f:
		f.write('# Generated by XCMAKE.\n')
		f.write('cmake_minimum_required(VERSION %s)\n\n'%(CMAKE_MIN_VERSION))
		f.write('project(%s)\n\n'%(project_name))
		f.write('#set(CMAKE_VERBOSE_MAKEFILE on)\n\n')
		f.write('include_directories(include)\n\n')
		f.write('file(GLOB sources "src/*.cpp")\n\n')
		f.write('add_executable(%s ${sources})\n\n'%(project_name))
		f.write('#target_link_libraries(%s ${libs})\n\n'%(project_name))
		f.write('#add_library(%s_shared SHARED ${sources})\n\n'%(project_name))
		f.write('#add_library(%s_static STATIC ${sources})\n\n'%(project_name))
		f.write('set(CMAKE_INSTALL_PREFIX "%s")\n\n'%(os.path.join(XCMAKE_ARGS.build_dir, XCMAKE_INSTALL_DIR).replace('\\', '/')))
		f.write('install(TARGETS %s DESTINATION bin)\n\n'%(project_name))
		f.write('install(DIRECTORY include/ DESTINATION include FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h")\n\n')
		f.write('#install(TARGETS %s_shared DESTINATION lib)\n\n'%(project_name))
		f.write('#install(TARGETS %s_static DESTINATION lib)\n\n'%(project_name))

def command_scratch():
        cmakelists = os.path.abspath(CMAKELISTS)
	if os.path.exists(cmakelists):
		raise XCMakeError('"%s" exists.'%(cmakelists))
	try:
		do_command_scratch(cmakelists)
	except:
		os.remove(cmakelists)
		raise

def command_cmake():
	do_cmake(['-E', 'chdir', XCMAKE_ARGS.build_dir, 'cmake'])

def command_update(with_argv=True):
	do_cmake(['-H' + WORK_DIR, '-B' + XCMAKE_ARGS.build_dir], with_argv=with_argv)

def do_build_target(target=None, ddash_args=None):
	argv = ['--build', XCMAKE_ARGS.build_dir]
	if target:
		argv += ['--target', target]
	do_cmake(argv, ddash_args=ddash_args)

def generator_jobs_arg():
	gen = find_cache_entry('CMAKE_GENERATOR')
	if gen:
		if gen[0].find('Visual Studio') >= 0:
			return ('/m', '/m:%d')
	return ('-j', '-j%d')

def build_native_args():
	args = None
	if XCMAKE_ARGS.jobs == None: 
		args = [generator_jobs_arg()[0]]
	elif XCMAKE_ARGS.jobs >= 0:
		args = [generator_jobs_arg()[1]%(XCMAKE_ARGS.jobs)]
	return args

def command_build():
	if not os.path.exists(XCMAKE_ARGS.build_dir) or not os.listdir(XCMAKE_ARGS.build_dir):
		command_update(with_argv=False)
	ddash_args = build_native_args()
	if not XCMAKE_ARGS.target:
		return do_build_target(None, ddash_args)
	targets = set()
	for target in XCMAKE_ARGS.target:
		if target in targets:
			continue
		targets.add(target)
		do_build_target(target, ddash_args)

def command_make():
	command_update(with_argv=False)
	command_build()

def command_clean():
	if os.path.exists(XCMAKE_ARGS.build_dir):
		if WORK_DIR == XCMAKE_ARGS.build_dir:
			sys.stderr.write('Can\'t remove working directory.\n')
			sys.exit(2)
	sh_check_call(['cmake', '-E', 'remove_directory', XCMAKE_ARGS.build_dir])

class ArgumentParser(argparse.ArgumentParser):
	def error(self, message):
		sys.stderr.write('%s: %s\n\n'%(self.prog, message))
		self.print_help(sys.stderr)
		self.exit(1)

class PathAction(argparse.Action):
	def __call__(self, parser, namespace, values, option_string=None):
		setattr(namespace, self.dest, os.path.abspath(values))

def parse_arguments(args):
	parser = ArgumentParser(prog=XCMAKE_PROG, description=XCMAKE_DESCRIPTION)
	parser.add_argument('--build-dir', metavar='<build-dir>', action=PathAction, default=XCMAKE_ABS_BUILD_DIR, help='Default \'%s\''%(XCMAKE_BUILD_DIR))
	parser.add_argument('--scratch', action='store_true', help='Generate %s template'%(CMAKELISTS))
	parser.add_argument('--update', action='store_true', help='Run cmake generator')
	parser.add_argument('--build', action='store_true', help='Run cmake build without update')
	parser.add_argument('--clean', action='store_true', help='Remove <build-dir>')
	parser.add_argument('--cmake', action='store_true', help='Run cmake in <build-dir>')
	# make
	parser.add_argument('-j', '--jobs', metavar='N', type=int, nargs='?', default=-1, help='Allow N jobs at once; infinite jobs with no arg')
	parser.add_argument('-v', '--version', action='store_true', help='Display version.')
	parser.add_argument('target', nargs='*', help='targets of make')
	# only for help
	parser.add_argument('--', dest='cmake_argv', metavar='', help='Pass remaining options to cmake')

	global XCMAKE_ARGS
	XCMAKE_ARGS = parser.parse_args(args)

def main():
	argv = sys.argv[1:]
	cmake_argv_idx = len(argv)
	try:
		cmake_argv_idx = argv.index('--')
	except:
		pass
	parse_arguments(argv[:cmake_argv_idx])
	setattr(XCMAKE_ARGS, 'cmake_argv', argv[cmake_argv_idx + 1:])

	#print(XCMAKE_ARGS)
	if XCMAKE_ARGS.version:
		return command_version()
	if XCMAKE_ARGS.scratch:
		return command_scratch()
	if XCMAKE_ARGS.clean:
		return command_clean()
	if XCMAKE_ARGS.cmake:
		return command_cmake()
	if XCMAKE_ARGS.update:
		return command_update()
	if XCMAKE_ARGS.build:
		return command_build()
	return command_make()

if __name__ == '__main__':
	try:
		main()
	except subprocess.CalledProcessError, e:
		sys.exit(e.returncode)
	except Exception, e:
		sys.stderr.write('%s: %s\n'%(type(e).__name__, str(e)))
		sys.exit(255)

